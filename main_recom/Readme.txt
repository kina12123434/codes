各手法の実験コードのmain関数ファイルを格納している．
このディレクトリのソースは実データ用で，人工データ用はartificialityフォルダに格納．

auc_calculation.cxx
    AUC再計算用のコード．実験完了後にrecom.cxxのAUC計算コードに不備があったため作成した．（recom.cxxは修正済み）


MFの動作について，クラスタリングなしMFとクラスタリングありMFでは一部の動作が異なる．
    ある欠損パターンでNaNが出たとき
        ・前者はそれ以降の欠損パターンでの実験は行わず、そのMFパラメータでの実験を中止して次のパラメータに移る．結果ファイルは一部を除いて出力しない．
        ・後者は収束しなかった旨を結果ファイルに出力する．以降の欠損パターンの実験も行う．
    MFの更新回数が上限に達したとき
        ・前者は収束した時と同様に結果を出力する．ただし全ての初期値で更新回数が上限に達していた場合は，NaNが出た場合と同様に一部を除いた結果ファイルを出力しない．
        ・後者はNaNが出た時と同じ動作をする．収束しなかった原因がNaNが出たからなのか，更新回数が上限に達したからなのかは結果ファイルからは判別不可．（標準出力はNaNと更新上限とで異なるのでそこから判別可能）
これらはsrc/recom.cxx内で定義している関数 precision_summury()（クラスタリングなしMF）, precision_summury2() （クラスタリングありMF）と，これを呼び出すmain関数の処理の違いによる．



前項に関連して，「クラスタリングありMFにおいてNaNや更新上限到達のために欠損パターンによっては結果が出力されない」という仕様は，今後包括的に実験を行っていくにあたって要検討事項となる．具体的には，パラメータによって精度指標値が計算できた欠損パターン数が異なってしまう点を考慮しなければならない．
一応，方針として自分が考えたものを以下に挙げておく。
    1. 計算の可否も手法比較の材料として解釈し，精度指標値が計算できた欠損パターン数が違ってもそのまま比較する．この場合，計算できなかった場合がどんな時にどれ程あったかを記録すること，クラスタリングなしMFの仕様をクラスタリングありMFと同じにすることが必要となる．
    2. 実際に計算できた値で考察する方が正確に比較できるため，NaNや更新上限到達の無いような欠損パターンを探したりパラメータ範囲を決めたりする．
